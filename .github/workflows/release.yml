name: Release

on:
  push:
    branches:
      - 'v[0-9]+*'  # Matches v1.0.0, v20.15.10, etc.

env:
  CARGO_TERM_COLOR: always
  RELEASE_BIN: smart-tree

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Get version from branch
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/heads/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: smart-tree-linux-amd64
          - os: macOS-latest
            target: x86_64-apple-darwin
            asset_name: smart-tree-macos-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: smart-tree-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip ${{ env.RELEASE_BIN }}
          cp ${{ env.RELEASE_BIN }} ${{ matrix.asset_name }}
          
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          cp ${{ env.RELEASE_BIN }}.exe ${{ matrix.asset_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream